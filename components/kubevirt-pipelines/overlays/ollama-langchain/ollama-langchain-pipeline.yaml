---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: ollama-langchain
spec:
  tasks:
    - name: modify-data-object
      params:
        - name: manifest
          value: |
            apiVersion: cdi.kubevirt.io/v1beta1
            kind: DataVolume
            metadata:
              generateName: flasker-server-
            spec:
              pvc:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 60Gi
                volumeMode: Filesystem
              source:
                http:
                  url: https://download.fedoraproject.org/pub/fedora/linux/releases/39/Cloud/x86_64/images/Fedora-Cloud-Base-39-1.5.x86_64.qcow2
        - name: waitForSuccess
          value: 'true'
      taskRef:
        kind: Task
        name: modify-data-object
    - name: generate-ssh-keys
      params:
        - name: privateKeyConnectionOptions
          value:
            - 'user:fedora'
            - 'disable-strict-host-key-checking:true'
      taskRef:
        kind: Task
        name: generate-ssh-keys
      runAfter:
        - modify-data-object
    - name: create-vm-from-manifest
      params:
        - name: manifest
          value: |
            apiVersion: kubevirt.io/v1
            kind: VirtualMachine
            metadata:
              generateName: flasker-vm-
              annotation:
                description: Fedora VM generated by ollama-langchain pipeline
              labels:
                app: flasker-vm
            spec:
              running: true
              template:
                metadata:
                  labels:
                    kubevirt.io/domain: flasker-vm
                spec:
                  accessCredentials:
                    - sshPublicKey:
                        source:
                          secret:
                            secretName: $(tasks.generate-ssh-keys.results.publicKeySecretName)
                        propagationMethod:
                          configDrive: {}
                  domain:
                    cpu:
                      cores: 4
                      sockets: 1
                      threads: 1
                    devices:
                      disks:
                        - name: rootdisk
                          bootOrder: 1
                          disk:
                            bus: virtio
                        - name: cloudinitdisk
                          disk:
                            bus: virtio
                      interfaces:
                        - bridge: {}
                          name: default
                      networkInterfaceMultiqueue: true
                      rng: {}
                    resources:
                      requests:
                        memory: 8Gi
                  hostname: flasker-vm
                  networks:
                    - name: default
                      pod: {}
                  volumes:
                    - name: rootdisk
                      persistentVolumeClaim:
                        claimName: $(tasks.modify-data-object.results.name)
                    - name: cloudinitdisk
                      cloudInitConfigDrive:
                        userData: "#cloud-config\nuser: fedora\npassword: e4yu-lfvm-i68o\nssh_pwauth: True\nchpasswd: { expire: False }\nruncmd:\n  - dnf install -y git vim python3-pip curl firewalld"
        - name: ownDataVolumes
          value:
            - "$(tasks.modify-data-object.results.name)"
      runAfter:
        - generate-ssh-keys
      taskRef:
        kind: Task
        name: create-vm-from-manifest
    - name: execute-in-vm
      params:
        - name: vmName
          value: $(tasks.create-vm-from-manifest.results.name)
        - name: secretName
          value: $(tasks.generate-ssh-keys.results.privateKeySecretName)
        - name: script
          value: |
            curl -fsSL https://ollama.com/install.sh | sh
            echo "OLLAMA should now be installed."
            git clone https://github.com/tosin2013/ollama-langchain.git
      runAfter:
        - create-vm-from-manifest
      taskRef:
        kind: Task
        name: execute-in-vm
